#!/bin/bash 
#
#
# Settings
#
# Path to BPQ binary directory
# This can be the same as the default directory where the main linbpq config files are kept
#
# However this script is designed to allow a common binary path so more than one node can
# run from the same binary, hence the /home/pi/bpqbin/ directory. The node config files are stored
# in /home/pi/nodes/<callsign>/ where the binary 'pilinbpq' is a symbolic link to another symbolic
# link within the /home/pi/bpqbin directory that gets updated in turn to point to the the actual
# binary in /home/pi/bpqbin/, this is how the previous versions of the binary are kept aside for
# emergency rollback. 
#
# Incidentally, the file name of the symlink from the node config directory
# is also the callsign of the node. This allows the running processs to be referenced by callsign.
#
# To set that up, go to the /home/pi/nodes/<callsign>/ directory and issue:
# ln -s /home/pi/bpqbin/pilinbpq <callsign>
#
# E.g. cd /home/pi/nodes/pe1rrr ; ln -s /home/pi/bpqbin/pilinbpq pe1rrr
#
# Set the path to the binary storage here
bpqbin=bpqbin
# Name of binary to pull as well as use
binary=pilinbpq
# WWW path to download
bpqwww="http://www.cantab.net/users/john.wiseman/Downloads/Beta/${binary}"

# Rolling Back
#
# This script pulls the latest file from the Beta build system of G8BPQ, and then
# stores the previous versions with file dates and version numbers in the filename
# in case something has been broken in a beta build and you need to roll back.
# Rolling back is simple, unlinking the /home/pi/bpqbin/pilinbpq from the
# current version (ls -l will show you which one it is linked to), and then
# re-linking one of the older versions to the pilinbpq symbolic link.
#
# e.g 
#  cd /home/pi/bpqbin ; ls -l
#  unlink pilinbpq
#  ln -s pilinbpq.<filedate>.<version> pilinbpq
# 

# Restarting automatically
# 
# This script depends on there being an appropriate <callsign>.service file in
# either /etc/systemd/system or /lib/systemd/system (preferred).
# To get a systemd start/stop/restart script installed, please check out
# the packet notes on http://red-heat.com under Amateur Radio.
# Alternatively, one is included in the github repository with this update script.
#
# Don't forget to update the file that the systemd script calls in 
# /home/pi/nodes/<callsign>/runbpq to make sure the paths are correct.

#### End of Settings

function getwww() {
        wget ${bpqwww} -O ${bpqbin}/${binary}.tmp
}

function restartbpq() {
    for instance in "${myNodes[@]}"; do
	echo "Restarting $instance"
    	sudo systemctl restart $instance
    done
}

function setup() {
	getwww
	chmod 755 "${bpqbin}/${binary}.tmp"
	chmod u+s "${bpqbin}/${binary}.tmp"
	version=`${bpqbin}/${binary}.tmp -v | grep Version | cut -d' ' -f 7`
	mv "${bpqbin}/${binary}.tmp" "${bpqbin}/${binary}.${filedate}.${version}"
	sudo setcap "CAP_NET_ADMIN=ep CAP_NET_RAW=ep CAP_NET_BIND_SERVICE=ep"  "${bpqbin}/${binary}.${filedate}.${version}"
	unlink "${bpqbin}/${binary}"
	ln -s "${bpqbin}/${binary}.${filedate}.${version}" "${bpqbin}/${binary}"

}

myNodes=("$@") 

if  [[ -z "${myNodes[@]}" ]]
then
	echo "Forgot to mention which instances you are updating, Usage: crontab-update-bpq <node1> <node2>"
	echo "e.g ./crontab-update-bpq pe1rrr"
	echo "The callsign is used to tell systemd which process you are going to restart after updating"
	echo "If your system is not yet set up with your callsign as a symbolic link to pilinbpq"
        echo "you will need to first create it."
	echo "cd into the bpqbin directory; cd bpqbin;  ln -s pilinbpq yourcallsign"
	echo "If your node is not yet set up with systemd service startup, do not use this script!"
	exit
fi


oldfile=`readlink -f ${bpqbin}/${binary}`

if [ ! -f ${oldfile} ]; 
then
	echo "No existing binary found, first run? ok"
	filedate="first_run"
	setup
else
	local=$(date -d "$( stat ${oldfile} | awk '/Modify/{gsub( /^[^:]+: +/,"",$0); print}' )" "+%s")
	remote=$(date -d "$( curl -sI ${bpqwww} | awk '/last-modified/{gsub( /^[^:]+: +/,"",$0); print}' )" "+%s")

	if [[ ${local} -lt ${remote} ]]
	then
		filedate=`date -r "${bpqbin}/${binary}" "+%Y%m%d_%H%M"`
		if [ -z ${filedate} ]
		then
			filedate="first_run"
		fi
		setup
		echo "Upgraded to version $version - restarting"
		restartbpq
	else
		echo "Nothing to do"
		ls -l ${bpqbin}
	fi
fi
